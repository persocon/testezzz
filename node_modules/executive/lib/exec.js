// Generated by CoffeeScript 1.10.0
var BufferStream, Stream, logError, once, parse, ref, spawn,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Stream = require('stream');

spawn = require('child_process').spawn;

parse = require('./parse');

ref = require('./utils'), logError = ref.logError, once = ref.once;

BufferStream = (function(superClass) {
  extend(BufferStream, superClass);

  function BufferStream() {
    this.buffer = '';
    this.writable = true;
  }

  BufferStream.prototype.write = function(data) {
    return this.buffer += data;
  };

  BufferStream.prototype.end = function(data) {
    if (arguments.length) {
      this.write(data);
    }
    return this.writable = false;
  };

  BufferStream.prototype.destroy = function() {
    return this.writable = false;
  };

  BufferStream.prototype.toString = function() {
    return this.buffer;
  };

  return BufferStream;

})(Stream);

module.exports = function(cmd, opts, cb) {
  var args, child, done, exit, ref1, ref2, ref3, ref4, stderr, stdout;
  ref1 = parse(cmd, opts), cmd = ref1[0], args = ref1[1], opts = ref1[2];
  stderr = new BufferStream();
  stdout = new BufferStream();
  child = spawn(cmd, args, {
    cwd: opts.cwd,
    env: opts.env,
    stdio: (ref2 = opts.stdio) != null ? ref2 : [0, 'pipe', 'pipe'],
    detached: opts.detached,
    uid: opts.uid,
    gid: opts.gid
  });
  child.setMaxListeners(0);
  child.stdout.setEncoding((ref3 = opts.encoding) != null ? ref3 : 'utf8');
  child.stderr.setEncoding((ref4 = opts.encoding) != null ? ref4 : 'utf8');
  if (!opts.interactive) {
    child.stdout.pipe(stdout);
    child.stderr.pipe(stderr);
  }
  if (!opts.quiet) {
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
  }
  done = once(function(err, status) {
    stdout.destroy();
    stderr.destroy();
    child.kill();
    stdout = stdout.toString();
    stderr = stderr.toString();
    if (err != null) {
      err.cmd = cmd;
      err.args = args;
      err.stdout = stdout;
      err.stderr = stderr;
      err.status = status;
      if (!opts.quiet) {
        logError(err);
      }
    }
    return cb(err, stdout, stderr, status);
  });
  exit = once(function(status, signal) {
    var err;
    err = null;
    if (status !== 0) {
      err = new Error("Command failed, '" + cmd + "' exited with status " + status);
      err.signal = signal;
    }
    return done(err, status);
  });
  child.on('close', exit);
  child.on('error', done);
  return child;
};

//# sourceMappingURL=exec.js.map
