// Generated by CoffeeScript 1.10.0
var argsObject, argsString, fs, isString, isWin, path, ref, shellQuote, shellRequired;

fs = require('fs');

path = require('path');

shellQuote = require('shell-quote');

ref = require('./utils'), isString = ref.isString, isWin = ref.isWin;

shellRequired = function(args) {
  var arg, i, len;
  for (i = 0, len = args.length; i < len; i++) {
    arg = args[i];
    if (!isString(arg)) {
      return true;
    }
  }
  return false;
};

argsString = function(s, opts, env) {
  var args, cmd, k, ref1, ref2, v;
  args = shellQuote.parse(s);
  while (cmd = args.shift()) {
    if ((cmd.indexOf('=')) === -1) {
      break;
    }
    ref1 = cmd.split('=', 2), k = ref1[0], v = ref1[1];
    env[k] = v;
  }
  if (!isWin) {
    if ((opts.shell != null) || shellRequired(args)) {
      cmd = (ref2 = opts.shell) != null ? ref2 : '/bin/sh';
      args = ['-c', s];
    }
  }
  return [cmd, args, env];
};

argsObject = function(obj, opts, env) {
  var args, cmd, ref1, ref2;
  cmd = obj.cmd;
  env = Object.assign(env, (ref1 = obj.env) != null ? ref1 : {});
  args = (ref2 = obj.args) != null ? ref2 : [];
  return [cmd, args, env];
};

module.exports = function(args, opts) {
  var cmd, cmd_, env, ref1, ref2, ref3;
  if (opts == null) {
    opts = {};
  }
  env = Object.assign(process.env, (ref1 = opts.env) != null ? ref1 : {});
  if (isString(args)) {
    ref2 = argsString(args, opts, env), cmd = ref2[0], args = ref2[1], env = ref2[2];
  } else {
    ref3 = argsObject(args, opts, env), cmd = ref3[0], args = ref3[1], env = ref3[2];
  }
  opts.env = env;
  if (isWin) {
    cmd = path.normalize(cmd);
    if (fs.existsSync(cmd_ = cmd + '.cmd')) {
      cmd = cmd_;
    }
    args = ['/c', cmd].concat(args);
    cmd = 'cmd.exe';
  }
  return [cmd, args, opts];
};

//# sourceMappingURL=parse.js.map
